{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red89\green138\blue67;
\red202\green202\blue202;\red70\green137\blue204;\red212\green214\blue154;\red140\green211\blue254;\red183\green111\blue179;
\red194\green126\blue101;\red167\green197\blue152;\red67\green192\blue160;\red196\green83\blue86;\red205\green173\blue106;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c41569\c60000\c33333;
\cssrgb\c83137\c83137\c83137;\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c77255\c52549\c75294;
\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c30588\c78824\c69020;\cssrgb\c81961\c41176\c41176;\cssrgb\c84314\c72941\c49020;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh18340\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 #\strokec5 \
\strokec4 # parse geoSra datas and calculate GEO_QUAL\strokec5 \
\strokec4 #\strokec5 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec6 def\strokec5  \strokec7 parse_geo_sra\strokec5 (\strokec8 pd_array_partition\strokec5 ): \
\
    \strokec8 array_result\strokec5  = []\
    \strokec4 #i,n = 0,len(pd_array_partition)\strokec5 \
\
    \strokec9 for\strokec5  \strokec8 samples\strokec5  \strokec9 in\strokec5  \strokec8 pd_array_partition\strokec5 .itertuples(\strokec8 index\strokec5 =\strokec6 False\strokec5 ):\
\
        \strokec4 # initialise variable\strokec5 \
\
        \strokec8 lat_lon_src\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lat_lon_raw\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lat_src\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lat_raw\strokec5  = \strokec10 ''\strokec5 \
\
        \strokec8 lon_src\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lon_raw\strokec5  = \strokec10 ''\strokec5 \
        \
        \strokec8 lat_lon\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lat\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lon\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 lat_list\strokec5  = \strokec6 None\strokec5 \
        \strokec8 lon_list\strokec5  = \strokec6 None\strokec5 \
        \strokec8 lat_lon_list\strokec5  = \strokec6 None\strokec5 \
\
        \strokec8 latitude\strokec5  = \strokec6 None\strokec5 \
        \strokec8 longitude\strokec5  = \strokec6 None\strokec5 \
\
        \strokec8 latitude_precision\strokec5  = \strokec6 None\strokec5 \
        \strokec8 longitude_precision\strokec5  = \strokec6 None\strokec5 \
\
        \strokec8 has_latlon\strokec5  = \strokec6 False\strokec5 \
\
        \strokec8 geo_qual\strokec5  = \strokec11 4.0\strokec5 \
\
        \strokec4 #\strokec5 \
        \strokec4 # parse from metadata available\strokec5 \
        \strokec4 #\strokec5 \
\
        \strokec8 bioproject\strokec5  = \strokec8 samples\strokec5 .bioproject\
        \strokec8 acc\strokec5  = \strokec8 samples\strokec5 .acc\
        \strokec8 organism\strokec5  = \strokec8 samples\strokec5 .organism\
        \strokec8 assay_type\strokec5  = \strokec8 samples\strokec5 .assay_type\
        \strokec8 instrument\strokec5  = \strokec8 samples\strokec5 .instrument\
        \strokec8 librarylayout\strokec5  = \strokec8 samples\strokec5 .librarylayout\
        \strokec8 libraryselection\strokec5  = \strokec8 samples\strokec5 .libraryselection\
        \strokec8 librarysource\strokec5  = \strokec8 samples\strokec5 .librarysource\
        \strokec8 geo_loc_name_country_calc\strokec5  = \strokec8 samples\strokec5 .geo_loc_name_country_calc\
        \strokec8 geo_loc_name_country_continent_calc\strokec5  = \strokec8 samples\strokec5 .geo_loc_name_country_continent_calc\
        \strokec8 mbytes\strokec5  = \strokec8 samples\strokec5 .mbytes\
        \strokec8 mbases\strokec5  = \strokec8 samples\strokec5 .mbases\
\
        \strokec8 releasedate\strokec5  = \strokec6 None\strokec5 \
        \strokec9 if\strokec5 ( \strokec6 not\strokec5  \strokec12 pd\strokec5 .\strokec8 isnull\strokec5 (\strokec8 samples\strokec5 .releasedate)) :\
            \strokec9 if\strokec5 (\strokec7 is_date\strokec5 (\strokec8 samples\strokec5 .releasedate)):\
                 \strokec8 releasedate\strokec5  = \strokec12 pd\strokec5 .\strokec7 to_datetime\strokec5 (\strokec8 samples\strokec5 .releasedate)\
\
        \strokec8 collection_date\strokec5  = \strokec6 None\strokec5 \
        \strokec9 if\strokec5 ( \strokec6 not\strokec5  \strokec12 pd\strokec5 .\strokec8 isnull\strokec5 (\strokec8 samples\strokec5 .collection_date)) :\
            \strokec4 # multiple collection date are sometimes available for the same sample\strokec5 \
            \strokec4 # take the first one\strokec5 \
            \strokec9 if\strokec5 (\strokec7 is_date\strokec5 (\strokec8 samples\strokec5 .collection_date)):\
                \strokec8 collection_date\strokec5  = \strokec12 pd\strokec5 .\strokec7 to_datetime\strokec5 (\strokec8 samples\strokec5 .collection_date)\
\
        \strokec4 # \strokec5 \
        \strokec4 # reverse geocoding\strokec5 \
        \strokec4 #\strokec5 \
\
        \strokec8 rg_country_code\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 rg_city\strokec5  = \strokec10 ''\strokec5 \
        \strokec8 rg_country\strokec5  = \strokec10 ''\strokec5 \
\
        \strokec4 #\strokec5 \
        \strokec4 # parse from attributes metadata available\strokec5 \
        \strokec4 #\strokec5 \
\
        \strokec8 lat_lon_patterns\strokec5  = [                                                 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 ,   \strokec4 # xx.xxx N xx.xxx W   \strokec5 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 ' \strokec10 [\strokec13 NS\strokec10 ])\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 ' \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 , \strokec4 # xx.xxx' N xx.xxx' W \strokec5 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0 \strokec10 [\strokec13 NS\strokec10 ])\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0 \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 , \strokec4 # xx.xxx\'b0 N xx.xxx\'b0 W \strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 '\strokec5 ,             \strokec4 # xx N xx W           \strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 '\strokec5 ,        \strokec4 # xx.xxx N xx W       \strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 '\strokec5 ,        \strokec4 # xx N xx.xxx W       \strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec10 )\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec10 )\strokec13 '\strokec5 ,             \strokec4 # xx.xxx xx.xxx       \strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0\strokec10 )\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0\strokec10 )\strokec13 '\strokec5 ,           \strokec4 # xx.xxx\'b0 xx.xxx\'b0     \strokec5 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 '\strokec10 )\strokec13  \strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 '\strokec10 )\strokec13 "\strokec5 ,           \strokec4 # xx.xxx' xx.xxx'\strokec5 \
        ]\
\
        \strokec8 lat_patterns\strokec5  = [\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13 "\strokec5 ,   \strokec4 # xx.xxx N xx.xxx W\strokec5 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 ' \strokec10 [\strokec13 NS\strokec10 ])\strokec13 "\strokec5 ,  \strokec4 # xx.xxx' N xx.xxx' W\strokec5 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0 \strokec10 [\strokec13 NS\strokec10 ])\strokec13 "\strokec5 ,  \strokec4 # xx.xxx\'b0 N xx.xxx\'b0 W\strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13 '\strokec5 ,             \strokec4 # xx N xx W\strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 NS\strokec10 ])\strokec13 '\strokec5 ,        \strokec4 # xx.xxx N xx W\strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec10 )\strokec13 '\strokec5 ,             \strokec4 # xx.xxx xx.xxx\strokec5 \
            \strokec6 r\strokec13 '\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0\strokec10 )\strokec13 '\strokec5 ,           \strokec4 # xx.xxx\'b0 xx.xxx\'b0\strokec5 \
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 '\strokec10 )\strokec13 "\strokec5 ,           \strokec4 # xx.xxx' xx.xxx'\strokec5 \
        ]\
\
        \strokec8 lon_patterns\strokec5  = [\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 ' \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0 \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13  \strokec10 [\strokec13 WE\strokec10 ])\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec10 )\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 \'b0\strokec10 )\strokec13 "\strokec5 ,\
            \strokec6 r\strokec13 "\strokec10 (\strokec13 -\strokec14 ?\strokec13 \\d\strokec14 +\\.\strokec13 \\d\strokec14 +\strokec13 '\strokec10 )\strokec13 "\strokec5 \
        ]\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec4 #############################################################################@\strokec5 \
\
        \strokec4 ###########################################################################\strokec5 \
        \strokec4 # \strokec5 \
        \strokec4 # selected tag\strokec5 \
        \strokec4 #\strokec5 \
\
        \strokec8 lat_lon_tag\strokec5  = [\strokec10 'lat_lon_sam_s_dpl34'\strokec5 ,\strokec10 'lat_lon_sam_s_dpl1'\strokec5 ,\strokec10 'geographic_location__latitude_and_longitude__sam'\strokec5 ,\strokec10 'geographic_location__latitudeandlongitude__sam'\strokec5 ,\strokec10 'latitude__and_longitude_sam'\strokec5 ,\strokec10 'latitude_and_longitude_sam'\strokec5 ,\strokec10 'lattitude_and_logitude_sam'\strokec5 ,\strokec10 'lat_lon_sam'\strokec5 ,\strokec10 'latlon_sam'\strokec5 ,\strokec10 'location_coordinates_sam'\strokec5 ,\strokec10 'other_gps_coordinates_sam'\strokec5 ,\strokec10 'lat_lon_dms_sam'\strokec5 ,\strokec10 'lat_long_correct_sam'\strokec5 ,\strokec10 'lat_lon_run'\strokec5 ]\
\
        \strokec8 lat_tag\strokec5  = [\strokec10 'geographic_location__latitude__sam_s_dpl4'\strokec5 ,\strokec10 'lat_lon_sam_s_dpl1'\strokec5 ,\strokec10 'latitude_sam'\strokec5 ,\strokec10 'lat_sam'\strokec5 ,\strokec10 'geographic_location__latitude__sam'\strokec5 ,\strokec10 'geographiclocation_latitude__sam'\strokec5 ,\strokec10 'latitude_dd_sam'\strokec5 ,\strokec10 'latitude_deg_sam'\strokec5 ,\strokec10 'biological_material_latitude_sam'\strokec5 ]\
\
        \strokec8 lon_tag\strokec5  = [\strokec10 'geographic_location__longitude__sam_s_dpl5'\strokec5 ,\strokec10 'longitude_sam'\strokec5 ,\strokec10 'lon_sam'\strokec5 ,\strokec10 'geographic_location__longitude__sam'\strokec5 ,\strokec10 'longitude_dd_sam'\strokec5 ,\strokec10 'longitude_deg_sam'\strokec5 ,\strokec10 'biological_material_longitude_sam'\strokec5 ]\
        \
        \strokec8 filtered_tag\strokec5  = \strokec12 np\strokec5 .\strokec7 concatenate\strokec5 ((\strokec8 lat_lon_tag\strokec5 ,\strokec8 lat_tag\strokec5 ,\strokec8 lon_tag\strokec5 ))\
\
        \strokec4 # Problem of serialization between dask partition / pandas\strokec5 \
        \strokec4 # attributes = samples.attributes\strokec5 \
        \strokec4 # attributes_df = pd.DataFrame.from_records(attributes)\strokec5 \
\
\
        \strokec8 attributes\strokec5  = \strokec8 samples\strokec5 .jattr\
\
        \strokec9 if\strokec5 (\strokec6 not\strokec5  \strokec8 attributes\strokec5 ==\strokec10 ""\strokec5 ):\
\
            \strokec8 attributes_df\strokec5  = \strokec12 pd\strokec5 .\strokec12 DataFrame\strokec5 (\strokec12 json\strokec5 .\strokec7 loads\strokec5 (\strokec8 attributes\strokec5 ).items(),\strokec8 columns\strokec5 =[\strokec10 'k'\strokec5 , \strokec10 'v'\strokec5 ])\
\
        \strokec9 else\strokec5 :\
            \strokec8 attributes_df\strokec5 =\strokec12 pd\strokec5 .\strokec12 DataFrame\strokec5 ()\
            \strokec7 print\strokec5 (\strokec10 "ERROR EMPTY"\strokec5 )\
\
        \strokec4 ###########################################################################\strokec5 \
        \
        \strokec9 if\strokec5 (\strokec10 'k'\strokec5  \strokec7 in\strokec5  \strokec8 attributes_df\strokec5 ):\
            \
            \strokec8 attributes_df\strokec5  = \strokec8 attributes_df\strokec5 .\strokec8 loc\strokec5 [\strokec8 attributes_df\strokec5 [\strokec10 'k'\strokec5 ].\strokec7 isin\strokec5 (\strokec8 filtered_tag\strokec5 )]\
\
            \strokec9 for\strokec5  \strokec8 index\strokec5 , \strokec8 attribute\strokec5  \strokec7 in\strokec5  \strokec8 attributes_df\strokec5 .\strokec7 iterrows\strokec5 ():\
                \
                \strokec4 #store attributes keyword\strokec5 \
\
                \strokec4 #if attribute['k'] in dict_attributes_k :\strokec5 \
                \strokec4 #    dict_attributes_k[attribute['k']] = dict_attributes_k[attribute['k']] + 1\strokec5 \
                \strokec4 #else :\strokec5 \
                \strokec4 #    dict_attributes_k[attribute['k']] = 0\strokec5 \
                \strokec4 #    print("keyword", attribute['k'])\strokec5 \
\
                \strokec4 ###########################################################################\strokec5 \
                \strokec4 # latitude - longitude in the same field\strokec5 \
\
\
                \strokec9 if\strokec5  \strokec8 attribute\strokec5 [\strokec10 'k'\strokec5 ] \strokec6 in\strokec5  \strokec8 lat_lon_tag\strokec5  :\
                    \
                    \strokec8 lat_lon_src\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'k'\strokec5 ]\
\
                    \strokec9 if\strokec5 (\strokec7 isinstance\strokec5 (\strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ], \strokec12 list\strokec5 )):\
                        \strokec8 lat_lon\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ][\strokec11 0\strokec5 ]\
                        \strokec8 lat_lon_raw\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ][\strokec11 0\strokec5 ]\
                    \strokec9 else\strokec5 :\
                        \strokec8 lat_lon\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ]\
                        \strokec8 lat_lon_raw\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ]\
\
                    \strokec9 if\strokec5  \strokec6 not\strokec5  \strokec7 is_alpha_string\strokec5 (\strokec12 str\strokec5 (\strokec8 lat_lon\strokec5 )):\
                        \strokec9 for\strokec5  \strokec8 pattern\strokec5  \strokec9 in\strokec5  \strokec8 lat_lon_patterns\strokec5 :\
                            \strokec9 if\strokec5  \strokec12 re\strokec5 .\strokec7 match\strokec5 (\strokec8 pattern\strokec5 ,\strokec12 str\strokec5 (\strokec8 lat_lon\strokec5 )):\
                                \strokec8 lat_lon_list\strokec5  = \strokec12 re\strokec5 .\strokec7 match\strokec5 (\strokec8 pattern\strokec5 ,\strokec12 str\strokec5 (\strokec8 lat_lon\strokec5 ))\
\
                \strokec4 ###########################################################################\strokec5 \
\
                \strokec4 ###########################################################################\strokec5 \
                \strokec4 # latitude - longitude in separated fields\strokec5 \
\
                \strokec4 # latitude\strokec5 \
\
                \strokec9 if\strokec5  \strokec8 attribute\strokec5 [\strokec10 'k'\strokec5 ] \strokec6 in\strokec5  \strokec8 lat_tag\strokec5  :\
                    \
                    \strokec8 lat_src\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'k'\strokec5 ]\
\
                    \strokec9 if\strokec5 (\strokec7 isinstance\strokec5 (\strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ], \strokec12 list\strokec5 )):\
                        \strokec8 lat\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ][\strokec11 0\strokec5 ]\
                        \strokec8 lat_raw\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ][\strokec11 0\strokec5 ]\
                    \strokec9 else\strokec5 :\
                        \strokec8 lat\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ]\
                        \strokec8 lat_raw\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ]\
\
                    \strokec9 if\strokec5  \strokec8 lat_lon_src\strokec5  == \strokec10 ''\strokec5 :\
                        \strokec8 lat_lon_src\strokec5  = \strokec8 lat_src\strokec5 \
                        \strokec8 lat_lon_raw\strokec5  = \strokec8 lat_raw\strokec5 \
                    \strokec9 else\strokec5 :\
                        \strokec8 lat_lon_src\strokec5  = \strokec8 lat_src\strokec5  + \strokec10 " "\strokec5  + \strokec8 lat_lon_src\strokec5 \
                        \strokec8 lat_lon_raw\strokec5  = \strokec12 str\strokec5 (\strokec8 lat_raw\strokec5 ) + \strokec10 " "\strokec5  + \strokec8 lat_lon_raw\strokec5 \
\
                    \strokec9 if\strokec5  \strokec6 not\strokec5  \strokec7 is_alpha_string\strokec5 (\strokec12 str\strokec5 (\strokec8 lat\strokec5 )) :\
                        \strokec9 for\strokec5  \strokec8 pattern\strokec5  \strokec9 in\strokec5  \strokec8 lat_patterns\strokec5 :\
                            \strokec9 if\strokec5  \strokec12 re\strokec5 .\strokec7 match\strokec5 (\strokec8 pattern\strokec5 ,\strokec12 str\strokec5 (\strokec8 lat\strokec5 )):\
                                \strokec8 lat_list\strokec5  = \strokec12 re\strokec5 .\strokec7 match\strokec5 (\strokec8 pattern\strokec5 ,\strokec12 str\strokec5 (\strokec8 lat\strokec5 ))\
\
                \strokec4 # longitude\strokec5 \
                \
                \strokec9 if\strokec5  \strokec8 attribute\strokec5 [\strokec10 'k'\strokec5 ] \strokec6 in\strokec5  \strokec8 lon_tag\strokec5  :\
                    \
                    \strokec8 lon_src\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'k'\strokec5 ]\
                    \
                    \strokec9 if\strokec5 (\strokec7 isinstance\strokec5 (\strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ], \strokec12 list\strokec5 )):\
                        \strokec8 lon\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ][\strokec11 0\strokec5 ]\
                        \strokec8 lon_raw\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ][\strokec11 0\strokec5 ]\
                    \strokec9 else\strokec5 :\
                        \strokec8 lon\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ]\
                        \strokec8 lon_raw\strokec5  = \strokec8 attribute\strokec5 [\strokec10 'v'\strokec5 ]\
                    \
                    \strokec9 if\strokec5  \strokec8 lat_lon_src\strokec5  == \strokec10 ''\strokec5 :\
                        \strokec8 lat_lon_src\strokec5  = \strokec8 lon_src\strokec5 \
                        \strokec8 lat_lon_raw\strokec5  = \strokec8 lon_raw\strokec5 \
                    \strokec9 else\strokec5 :\
                        \strokec8 lat_lon_src\strokec5  = \strokec8 lat_lon_src\strokec5  + \strokec10 " "\strokec5  + \strokec8 lon_src\strokec5 \
                        \strokec8 lat_lon_raw\strokec5  = \strokec8 lat_lon_raw\strokec5  + \strokec10 " "\strokec5  + \strokec12 str\strokec5 (\strokec8 lon_raw\strokec5 )\
\
                    \strokec9 if\strokec5  \strokec6 not\strokec5  \strokec7 is_alpha_string\strokec5 (\strokec12 str\strokec5 (\strokec8 lon\strokec5 )) :\
                        \strokec9 for\strokec5  \strokec8 pattern\strokec5  \strokec9 in\strokec5  \strokec8 lon_patterns\strokec5 :\
                            \strokec9 if\strokec5  \strokec12 re\strokec5 .\strokec7 match\strokec5 (\strokec8 pattern\strokec5 ,\strokec12 str\strokec5 (\strokec8 lon\strokec5 )):\
                                \strokec8 lon_list\strokec5  = \strokec12 re\strokec5 .\strokec7 match\strokec5 (\strokec8 pattern\strokec5 ,\strokec12 str\strokec5 (\strokec8 lon\strokec5 ))\
                \
                \strokec4 ###########################################################################\strokec5 \
\
            \strokec4 ###########################################################################\strokec5 \
                \
            \strokec4 #\strokec5 \
            \strokec4 # lat_lon_parser\strokec5 \
            \strokec4 #\strokec5 \
\
            \strokec9 if\strokec5  \strokec8 lat_lon_list\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5  :\
\
                \strokec9 try\strokec5  :\
                    \strokec8 latitude\strokec5  = \strokec7 parse\strokec5 (\strokec8 lat_lon_list\strokec5 .\strokec7 group\strokec5 (\strokec11 1\strokec5 ))\
                    \strokec8 longitude\strokec5  = \strokec7 parse\strokec5 (\strokec8 lat_lon_list\strokec5 .\strokec7 group\strokec5 (\strokec11 2\strokec5 ))\
                    \strokec8 latitude_precision\strokec5  = \strokec7 decimal_precision\strokec5 (\strokec8 latitude\strokec5 )\
                    \strokec8 longitude_precision\strokec5  = \strokec7 decimal_precision\strokec5 (\strokec8 longitude\strokec5 )\
                \strokec9 except\strokec5 :\
                    \strokec7 print\strokec5 (\strokec10 "parse ERROR"\strokec5 , \strokec8 acc\strokec5 ,\strokec8 lat_lon\strokec5 )\
                    \strokec9 pass\strokec5 \
\
            \strokec9 if\strokec5  (\strokec8 lon_list\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 ) & (\strokec8 lat_list\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 ) & (\strokec12 str\strokec5 (\strokec8 lon\strokec5 ).\strokec7 count\strokec5 (\strokec10 "."\strokec5 ) <=\strokec11 1\strokec5 ) & (\strokec12 str\strokec5 (\strokec8 lat\strokec5 ).\strokec7 count\strokec5 (\strokec10 "."\strokec5 ) <=\strokec11 1\strokec5 ) :\
\
                \strokec9 if\strokec5  (\strokec8 lon_list\strokec5 .\strokec7 group\strokec5 (\strokec11 1\strokec5 ) \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 ) & (\strokec8 lat_list\strokec5 .\strokec7 group\strokec5 (\strokec11 1\strokec5 ) \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 ) :\
\
                    \strokec9 try\strokec5  :\
                        \strokec8 latitude\strokec5  = \strokec7 parse\strokec5 (\strokec8 lat_list\strokec5 .\strokec7 group\strokec5 (\strokec11 1\strokec5 ))\
                        \strokec8 longitude\strokec5  = \strokec7 parse\strokec5 (\strokec8 lon_list\strokec5 .\strokec7 group\strokec5 (\strokec11 1\strokec5 ))\
                        \strokec8 latitude_precision\strokec5  = \strokec7 decimal_precision\strokec5 (\strokec8 latitude\strokec5 )\
                        \strokec8 longitude_precision\strokec5  = \strokec7 decimal_precision\strokec5 (\strokec8 longitude\strokec5 )\
                    \strokec9 except\strokec5  :\
                        \strokec7 print\strokec5 (\strokec10 "parse ERROR"\strokec5 , \strokec8 acc\strokec5 ,\strokec8 lat\strokec5 , \strokec8 lon\strokec5 )\
                        \strokec9 pass\strokec5 \
\
            \strokec4 #\strokec5 \
            \strokec4 # reverse geocoding\strokec5 \
            \strokec4 #\strokec5 \
            \
            \strokec9 if\strokec5 ((\strokec8 latitude\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 ) & (\strokec8 longitude\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 )):\
                \strokec8 coordinates\strokec5  = [(\strokec8 latitude\strokec5 ,\strokec8 longitude\strokec5 )]\
                \strokec8 has_latlon\strokec5 =\strokec6 True\strokec5 \
                \strokec8 rgeocode\strokec5  = \strokec12 rg\strokec5 .\strokec7 search\strokec5 (\strokec8 coordinates\strokec5 )\
                \
                \strokec9 if\strokec5 (\strokec7 len\strokec5 (\strokec8 rgeocode\strokec5 )>\strokec11 0\strokec5 ):\
                    \strokec8 rg_country_code\strokec5  = \strokec8 rgeocode\strokec5 [\strokec11 0\strokec5 ][\strokec10 'country_code'\strokec5 ]\
                    \strokec8 rg_city\strokec5  = \strokec8 rgeocode\strokec5 [\strokec11 0\strokec5 ][\strokec10 'city'\strokec5 ]\
                    \strokec8 rg_country\strokec5  = \strokec8 rgeocode\strokec5 [\strokec11 0\strokec5 ][\strokec10 'country'\strokec5 ]\
            \
            \strokec4 #\strokec5 \
            \strokec4 # GEO_QUAL calc\strokec5 \
            \strokec4 #\strokec5 \
            \
            \strokec8 thr_prec\strokec5  = \strokec11 2\strokec5 \
            \strokec9 if\strokec5  ((\strokec8 latitude\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 ) & (\strokec8 longitude\strokec5  \strokec6 is\strokec5  \strokec6 not\strokec5  \strokec6 None\strokec5 )):\
                \strokec9 if\strokec5  ((\strokec8 latitude_precision\strokec5  > \strokec8 thr_prec\strokec5 ) | (\strokec8 longitude_precision\strokec5  > \strokec8 thr_prec\strokec5 )):\
                    \strokec8 geo_qual\strokec5  = \strokec11 1.3\strokec5 \
                    \strokec9 if\strokec5  \strokec6 not\strokec5  \strokec7 country_is_na\strokec5 (\strokec8 geo_loc_name_country_calc\strokec5 ):\
                        \strokec8 geo_qual\strokec5  = \strokec11 1.2\strokec5 \
                        \strokec9 if\strokec5  \strokec7 match_countries\strokec5 (\strokec8 geo_loc_name_country_calc\strokec5 ,\strokec8 rg_country\strokec5 ):\
                            \strokec8 geo_qual\strokec5  = \strokec11 1.1\strokec5 \
                        \strokec9 else\strokec5 :\
                            \strokec9 if\strokec5  \strokec7 reverse_lat_lon_test\strokec5 (\strokec8 latitude\strokec5 ,\strokec8 longitude\strokec5 ,\strokec8 geo_loc_name_country_calc\strokec5 ):\
                                \strokec8 longitude\strokec5 ,\strokec8 latitude\strokec5  = \strokec8 latitude\strokec5 ,\strokec8 longitude\strokec5 \
                                \strokec8 geo_qual\strokec5  = \strokec11 1.15\strokec5 \
                \strokec9 else\strokec5 :\
                    \strokec8 geo_qual\strokec5  = \strokec11 2.3\strokec5 \
                    \strokec9 if\strokec5  \strokec6 not\strokec5  \strokec7 country_is_na\strokec5 (\strokec8 geo_loc_name_country_calc\strokec5 ):\
                        \strokec8 geo_qual\strokec5  = \strokec11 2.2\strokec5 \
                        \strokec9 if\strokec5  \strokec7 match_countries\strokec5 (\strokec8 geo_loc_name_country_calc\strokec5 ,\strokec8 rg_country\strokec5 ):\
                            \strokec8 geo_qual\strokec5  = \strokec11 2.1\strokec5 \
                        \strokec9 else\strokec5 :\
                            \strokec9 if\strokec5  \strokec7 reverse_lat_lon_test\strokec5 (\strokec8 latitude\strokec5 ,\strokec8 longitude\strokec5 ,\strokec8 geo_loc_name_country_calc\strokec5 ):\
                                \strokec8 longitude\strokec5 ,\strokec8 latitude\strokec5  = \strokec8 latitude\strokec5 ,\strokec8 longitude\strokec5 \
                                \strokec8 geo_qual\strokec5  = \strokec11 2.15\strokec5 \
\
            \strokec9 elif\strokec5  (((\strokec8 latitude\strokec5  \strokec6 is\strokec5  \strokec6 None\strokec5 ) | (\strokec8 longitude\strokec5  \strokec6 is\strokec5  \strokec6 None\strokec5 )) & (\strokec6 not\strokec5  \strokec7 country_is_na\strokec5 (\strokec8 geo_loc_name_country_calc\strokec5 ))):\
                \strokec8 geo_qual\strokec5  = \strokec11 3.0\strokec5 \
            \
        \strokec4 # append result\strokec5 \
        \strokec8 array_result\strokec5 .\strokec7 append\strokec5 ([\strokec8 bioproject\strokec5 ,\strokec8 acc\strokec5 ,\strokec8 organism\strokec5 ,\strokec8 assay_type\strokec5 ,\strokec8 instrument\strokec5 ,\strokec8 librarylayout\strokec5 ,\strokec8 libraryselection\strokec5 ,\strokec8 librarysource\strokec5 ,\strokec8 geo_loc_name_country_calc\strokec5 ,\strokec8 geo_loc_name_country_continent_calc\strokec5 ,\strokec8 mbytes\strokec5 ,\strokec8 mbases\strokec5 ,\strokec8 releasedate\strokec5 ,\strokec8 collection_date\strokec5 ,\strokec8 lat_lon_src\strokec5 ,\strokec8 lat_lon_raw\strokec5 ,\strokec8 latitude\strokec5 ,\strokec8 longitude\strokec5 ,\strokec8 latitude_precision\strokec5 ,\strokec8 has_latlon\strokec5 ,\strokec8 longitude_precision\strokec5 ,\strokec8 rg_country_code\strokec5 ,\strokec8 rg_city\strokec5 ,\strokec8 rg_country\strokec5 ,\strokec8 geo_qual\strokec5 ])\
\
    \strokec8 columns\strokec5  = [\strokec10 'bioproject'\strokec5 , \strokec10 'acc'\strokec5 ,\strokec10 'organism'\strokec5 ,\strokec10 'assay_type'\strokec5 ,\strokec10 'instrument'\strokec5 ,\strokec10 'librarylayout'\strokec5 ,\strokec10 'libraryselection'\strokec5 ,\strokec10 'librarysource'\strokec5 ,\strokec10 'geo_loc_name_country_calc'\strokec5 ,\strokec10 'geo_loc_name_country_continent_calc'\strokec5 ,\strokec10 'mbytes'\strokec5 ,\strokec10 'mbases'\strokec5 ,\strokec10 'releasedate'\strokec5 , \strokec10 'collection_date'\strokec5 ,\strokec10 'lat_lon_src'\strokec5 ,\strokec10 'lat_lon_raw'\strokec5 ,\strokec10 'latitude'\strokec5 ,\strokec10 'longitude'\strokec5 ,\strokec10 'latitude_precision'\strokec5 ,\strokec10 'has_latlon'\strokec5 ,\strokec10 'longitude_precision'\strokec5 ,\strokec10 'rg_country_code'\strokec5 ,\strokec10 'rg_city'\strokec5 ,\strokec10 'rg_country'\strokec5 ,\strokec10 'GEO_QUAL'\strokec5 ]\
    \strokec8 dtype\strokec5  = [\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 int\strokec5 ,\strokec12 int\strokec5 ,\strokec12 datetime\strokec5 .\strokec12 date\strokec5 ,\strokec12 datetime\strokec5 .\strokec12 date\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 float\strokec5 ,\strokec12 float\strokec5 ,\strokec12 float\strokec5 ,\strokec12 float\strokec5 ,\strokec12 bool\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 str\strokec5 ,\strokec12 float\strokec5 ,\strokec12 int\strokec5 ,\strokec12 int\strokec5 ,\strokec12 str\strokec5 ]\
    \strokec8 cdt\strokec5 =\{\strokec8 i\strokec5 [\strokec11 0\strokec5 ]: \strokec8 i\strokec5 [\strokec11 1\strokec5 ] \strokec9 for\strokec5  \strokec8 i\strokec5  \strokec9 in\strokec5  \strokec12 zip\strokec5 (\strokec8 columns\strokec5 , \strokec8 dtype\strokec5 )\}        \
    \strokec8 pd_result\strokec5  = \strokec12 pd\strokec5 .\strokec12 DataFrame\strokec5 (\strokec8 data\strokec5 =\strokec8 array_result\strokec5 ,\strokec8 columns\strokec5 =\strokec12 list\strokec5 (\strokec8 cdt\strokec5 ))\
\
    \strokec9 return\strokec5  \strokec8 pd_result\strokec5 \
}