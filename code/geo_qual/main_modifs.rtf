{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red140\green211\blue254;
\red202\green202\blue202;\red183\green111\blue179;\red67\green192\blue160;\red194\green126\blue101;\red212\green214\blue154;
\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c61176\c86275\c99608;
\cssrgb\c83137\c83137\c83137;\cssrgb\c77255\c52549\c75294;\cssrgb\c30588\c78824\c69020;\cssrgb\c80784\c56863\c47059;\cssrgb\c86275\c86275\c66667;
\cssrgb\c70980\c80784\c65882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh18340\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 import pycountry\
\
#\
# dictionnaire pays / alpha 3\
#\
\
\
country_name_to_alpha_3\strokec5  = \{\strokec4 country\strokec5 .name: \strokec4 country\strokec5 .alpha_3 \strokec6 for\strokec5  \strokec4 country\strokec5  \strokec6 in\strokec5  \strokec7 pycountry\strokec5 .\strokec4 countries\strokec5 \}\
\
\strokec4 additional_mappings\strokec5  = \{\
    \strokec8 "Svalbard and Jan Mayen"\strokec5 :\strokec8 "NOR"\strokec5 ,\
    \strokec8 "South Korea"\strokec5 :\strokec8 "KOR"\strokec5 ,\
    \strokec8 "Czech Republic"\strokec5 :\strokec8 "CZE"\strokec5 ,\
    \strokec8 "Russian Federation"\strokec5 :\strokec8 "RUS"\strokec5 ,\
    \strokec8 "Russia"\strokec5 :\strokec8 "RUS"\strokec5 ,\
    \strokec8 "Hong Kong"\strokec5 :\strokec8 "CHN"\strokec5 ,\
    \strokec8 "Vietnam"\strokec5 :\strokec8 "VNM"\strokec5 ,\
    \strokec8 "Taiwan"\strokec5 :\strokec8 "TWN"\strokec5 ,\
    \strokec8 "Palestinian Territory"\strokec5 :\strokec8 "ISR"\strokec5 ,\
    \strokec8 "Turkey"\strokec5 :\strokec8 "TUR"\strokec5 ,\
    \strokec8 "Bolivia"\strokec5 :\strokec8 "BOL"\strokec5 ,\
    \strokec8 "Libyan Arab Jamahiriya"\strokec5 :\strokec8 "LBY"\strokec5 ,\
    \strokec8 "Cape Verde"\strokec5 :\strokec8 "CPV"\strokec5 ,\
    \strokec8 "Aland Islands"\strokec5 :\strokec8 "ALA"\strokec5 ,\
    \strokec8 "Saint Helena"\strokec5 :\strokec8 "SHN"\strokec5 ,\
    \strokec8 "Democratic Republic of the Congo"\strokec5 :\strokec8 "COD"\strokec5 ,\
    \strokec8 "Laos"\strokec5 :\strokec8 "LAO"\strokec5 ,\
    \strokec8 "Tanzania"\strokec5 :\strokec8 "TZN"\strokec5 ,\
    \strokec8 "Brunei"\strokec5 :\strokec8 "BRN"\strokec5 ,\
    \strokec8 "Iran"\strokec5 :\strokec8 "IRN"\strokec5 ,\
    \strokec8 "Svalbard"\strokec5 :\strokec8 "NOR"\strokec5 ,\
    \strokec8 "Macau"\strokec5 :\strokec8 "CHN"\strokec5 ,\
\}       \
\strokec4 country_name_to_alpha_3\strokec5 .\strokec9 update\strokec5 (\strokec4 additional_mappings\strokec5 )\
\
\'85\
\
#\
# cr\'e9ation des colonnes du df\
#\
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec4 columns\strokec5  = [\strokec8 'bioproject'\strokec5 , \strokec8 'acc'\strokec5 ,\strokec8 'organism'\strokec5 ,\strokec8 'assay_type'\strokec5 ,\strokec8 'instrument'\strokec5 ,\strokec8 'librarylayout'\strokec5 ,\strokec8 'libraryselection'\strokec5 ,\strokec8 'librarysource'\strokec5 ,\strokec8 'geo_loc_name_country_calc'\strokec5 ,\strokec8 'geo_loc_name_country_continent_calc'\strokec5 ,\strokec8 'mbytes'\strokec5 ,\strokec8 'mbases'\strokec5 ,\strokec8 'releasedate'\strokec5 , \strokec8 'collection_date'\strokec5 ,\strokec8 'lat_lon_src'\strokec5 ,\strokec8 'lat_lon_raw'\strokec5 ,\strokec8 'latitude'\strokec5 ,\strokec8 'longitude'\strokec5 ,\strokec8 'latitude_precision'\strokec5 ,\strokec8 'has_latlon'\strokec5 ,\strokec8 'longitude_precision'\strokec5 ,\strokec8 'rg_country_code'\strokec5 ,\strokec8 'rg_city'\strokec5 ,\strokec8 'rg_country'\strokec5 ,\strokec8 'GEO_QUAL'\strokec5 ]\
        \strokec4 dtype\strokec5  = [\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 int\strokec5 ,\strokec7 int\strokec5 ,\strokec7 datetime\strokec5 .\strokec7 date\strokec5 ,\strokec7 datetime\strokec5 .\strokec7 date\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 float\strokec5 ,\strokec7 float\strokec5 ,\strokec7 float\strokec5 ,\strokec7 float\strokec5 ,\strokec7 bool\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 str\strokec5 ,\strokec7 float\strokec5 ,\strokec7 int\strokec5 ,\strokec7 int\strokec5 ,\strokec7 str\strokec5 ]\
        \strokec4 cdt\strokec5 =\{\strokec4 i\strokec5 [\strokec10 0\strokec5 ]: \strokec4 i\strokec5 [\strokec10 1\strokec5 ] \strokec6 for\strokec5  \strokec4 i\strokec5  \strokec6 in\strokec5  \strokec7 zip\strokec5 (\strokec4 columns\strokec5 , \strokec4 dtype\strokec5 )\}\
        \strokec4 meta_df\strokec5  = \strokec7 pd\strokec5 .\strokec7 DataFrame\strokec5 (\strokec4 columns\strokec5 =\strokec7 list\strokec5 (\strokec4 cdt\strokec5 ))\
\pard\pardeftab720\partightenfactor0
\cf5 \cb1 \
\
\
}